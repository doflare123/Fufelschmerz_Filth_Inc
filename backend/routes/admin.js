const express = require('express');
const router = express.Router();
const { User, Resource, ExchangeRate, UserResource, BankResource, ExchangeRateHistory  } = require('../models');
const authMiddleware = require('../middleware/auth');
const roleMiddleware = require('../middleware/role');
const logExchangeRateChange = require('../utils/logExchangeHistory');

// üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ—Å—É—Ä—Å–∞ –ø–æ –∏–º–µ–Ω–∏
async function findResourceByName(name) {
  console.log("–°–ø–∏—Å–æ–∫ —Ä–µ—Å—É—Ä—Å–æ–≤")
  return await Resource.findOne({ where: { name } });
}

// üîπ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –∏–º–µ–Ω–∏
async function findUserByName(username) {
  console.log("–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–ª–µ–π")
  return await User.findOne({ where: { username } });
}

// üîπ –ê–¥–º–∏–Ω: –î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π —Ä–µ—Å—É—Ä—Å (—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–æ–∑–¥–∞–Ω–∏–µ–º –∑–∞–ø–∏—Å–∏ –≤ –±–∞–Ω–∫–µ)
router.post('/resources', authMiddleware, roleMiddleware('admin'), async (req, res) => {
  try {
    const { name } = req.body;
    console.log("–ù–æ–≤—ã–π —Ä–µ—Å—É—Ä—Å: " + name);
    
    
    // –°–æ–∑–¥–∞–µ–º —Ä–µ—Å—É—Ä—Å
    const resource = await Resource.create({ name });
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ –±–∞–Ω–∫–µ —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º 0
    await BankResource.create({
      resourceId: resource.id,
      quantity: 0
    });
    
    res.json({ message: '–†–µ—Å—É—Ä—Å –¥–æ–±–∞–≤–ª–µ–Ω –∏ —Å–æ–∑–¥–∞–Ω–∞ –∑–∞–ø–∏—Å—å –≤ –±–∞–Ω–∫–µ' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–∞:', err);
    res.status(400).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–∞' });
  }
});

// üîπ –ê–¥–º–∏–Ω: –î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã –≤ –±–∞–Ω–∫
router.post('/bank-resources', authMiddleware, roleMiddleware('admin'), async (req, res) => {
  try {
    const { resourceName, quantity } = req.body;
    console.log("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–µ—Å–æ–≤ –≤ –±–∞–Ω–∫: " + resourceName, " " + quantity)

    if (!resourceName || quantity === undefined) {
      return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∏–º—è —Ä–µ—Å—É—Ä—Å–∞ –∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ' });
    }

    const resource = await findResourceByName(resourceName);
    if (!resource) {
      return res.status(404).json({ error: '–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–ø–∏—Å—å –≤ –±–∞–Ω–∫–µ
    const bankResource = await BankResource.findOne({
      where: { ResourceId: resource.id }
    });

    if (bankResource) {
      // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
      await bankResource.update({ 
        quantity: bankResource.quantity + parseInt(quantity) 
      });
      res.json({ 
        message: `–î–æ–±–∞–≤–ª–µ–Ω–æ ${quantity} –µ–¥–∏–Ω–∏—Ü —Ä–µ—Å—É—Ä—Å–∞ "${resourceName}" –≤ –±–∞–Ω–∫. –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ: ${bankResource.quantity + parseInt(quantity)}` 
      });
    } else {
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
      await BankResource.create({
        ResourceId: resource.id,
        quantity: parseInt(quantity)
      });
      res.json({ 
        message: `–î–æ–±–∞–≤–ª–µ–Ω–æ ${quantity} –µ–¥–∏–Ω–∏—Ü —Ä–µ—Å—É—Ä—Å–∞ "${resourceName}" –≤ –±–∞–Ω–∫` 
      });
    }
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ –±–∞–Ω–∫:', err);
    res.status(400).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ –±–∞–Ω–∫' });
  }
});

// üîπ –ê–¥–º–∏–Ω: –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ –±–∞–Ω–∫–µ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –º–µ—Ç–æ–¥)
router.put('/bank-resources/:resourceName', authMiddleware, roleMiddleware('admin'), async (req, res) => {
  try {
    const { resourceName } = req.params;
    const { quantity } = req.body;
    console.log("–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—Å–æ–≤: " + resourceName, " " + quantity)

    if (quantity === undefined) {
      return res.status(400).json({ error: '–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ' });
    }

    const resource = await findResourceByName(resourceName);
    if (!resource) {
      return res.status(404).json({ error: '–†–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const bankResource = await BankResource.findOne({
      where: { resourceId: resource.id }
    });

    if (bankResource) {
      await bankResource.update({ quantity: parseInt(quantity) });
    } else {
      await BankResource.create({
        resourceId: resource.id,
        quantity: parseInt(quantity)
      });
    }

    res.json({ 
      message: `–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ—Å—É—Ä—Å–∞ "${resourceName}" –≤ –±–∞–Ω–∫–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${quantity}` 
    });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ –±–∞–Ω–∫–µ:', err);
    res.status(400).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ä–µ—Å—É—Ä—Å–æ–≤ –≤ –±–∞–Ω–∫–µ' });
  }
});

router.post('/exchange-rates', authMiddleware, roleMiddleware('admin'), async (req, res) => {
  try {
    const { from, to, ratePayYou, rateGetYou } = req.body;
    console.log("–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞: ", from, to, ratePayYou, rateGetYou);

    if (!ratePayYou || !rateGetYou) {
      return res.status(400).json({ error: '–ù—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å ratePayYou –∏ rateGetYou' });
    }

    const [fromResource, toResource] = await Promise.all([
      findResourceByName(from),
      findResourceByName(to)
    ]);

    if (!fromResource || !toResource) {
      return res.status(400).json({ error: '–†–µ—Å—É—Ä—Å—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' });
    }

    // –û–±—Ä–∞—Ç–Ω—ã–π –∫—É—Ä—Å
    const reverseRatePayYou = rateGetYou;
    const reverseRateGetYou = ratePayYou;

    const [direct, reverse] = await Promise.all([
      ExchangeRate.findOne({ where: { fromResourceId: fromResource.id, toResourceId: toResource.id } }),
      ExchangeRate.findOne({ where: { fromResourceId: toResource.id, toResourceId: fromResource.id } }),
    ]);

    if (direct) {
      await direct.update({ ratePayYou, rateGetYou });
      await logExchangeRateChange(direct.id, rateGetYou / ratePayYou);
    } else {
      const newDirect = await ExchangeRate.create({
        fromResourceId: fromResource.id,
        toResourceId: toResource.id,
        ratePayYou,
        rateGetYou
      });
      await logExchangeRateChange(newDirect.id, rateGetYou / ratePayYou);
    }

    if (reverse) {
      await reverse.update({
        ratePayYou: reverseRatePayYou,
        rateGetYou: reverseRateGetYou
      });
      await logExchangeRateChange(reverse.id, reverseRateGetYou / reverseRatePayYou);
    } else {
      const newReverse = await ExchangeRate.create({
        fromResourceId: toResource.id,
        toResourceId: fromResource.id,
        ratePayYou: reverseRatePayYou,
        rateGetYou: reverseRateGetYou
      });
      await logExchangeRateChange(newReverse.id, reverseRateGetYou / reverseRatePayYou);
    }

    res.json({ message: '–ö—É—Ä—Å –æ–±–º–µ–Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω/–æ–±–Ω–æ–≤–ª—ë–Ω –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∫—É—Ä—Å–æ–º –æ–±–º–µ–Ω–∞:', err);
    res.status(400).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–±–æ—Ç–µ —Å –∫—É—Ä—Å–æ–º –æ–±–º–µ–Ω–∞' });
  }
});


// üîπ –ê–¥–º–∏–Ω: –ò–∑–º–µ–Ω–∏—Ç—å –∫—É—Ä—Å –æ–±–º–µ–Ω–∞ –ø–æ id (–¥–≤—É—Å—Ç–æ—Ä–æ–Ω–Ω–µ)
router.put('/exchange-rates/:id', authMiddleware, roleMiddleware('admin'), async (req, res) => {
  try {
    const exchangeRate = await ExchangeRate.findByPk(req.params.id);

    console.log("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞ –∫—É—Ä—Å–∞: " + exchangeRate)
    if (!exchangeRate) {
      return res.status(404).json({ error: '–ö—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }

    const { rate } = req.body;

    // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: —É–±—Ä–∞–Ω–æ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    const reverse = await ExchangeRate.findOne({
      where: {
        fromResourceId: exchangeRate.toResourceId,
        toResourceId: exchangeRate.fromResourceId
      }
    });

    await exchangeRate.update({ rate });
    await logExchangeRateChange(exchangeRate.id, rate);

    if (reverse) {
      await reverse.update({ rate: 1 / rate });
      await logExchangeRateChange(reverse.id, 1 / rate);
    }

    res.json({ message: '–ö—É—Ä—Å –æ–±–Ω–æ–≤–ª—ë–Ω –≤ –æ–±–µ —Å—Ç–æ—Ä–æ–Ω—ã' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞:', err);
    res.status(400).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—É—Ä—Å–∞' });
  }
});

// üîπ –ê–¥–º–∏–Ω: –î–æ–±–∞–≤–∏—Ç—å —Ä–µ—Å—É—Ä—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–ø–æ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ —Ä–µ—Å—É—Ä—Å–∞)
router.post('/users/:username/resources/:resourceName', authMiddleware, roleMiddleware('admin'), async (req, res) => {
  try {
    const { username, resourceName } = req.params;
    const { quantity } = req.body;
    console.log("–î–æ–±–∞–≤–∞–ª–µ–Ω–∏–µ —Ä–µ—Å–æ–≤ —é–∑–µ—Ä—É: " + username, " " + resourceName + " " + quantity)

    const [user, resource] = await Promise.all([
      findUserByName(username),
      findResourceByName(resourceName)
    ]);

    if (!user || !resource) {
      return res.status(404).json({ error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–ª–∏ —Ä–µ—Å—É—Ä—Å –Ω–µ –Ω–∞–π–¥–µ–Ω—ã' });
    }

    const userResource = await UserResource.findOne({
      where: {
        UserId: user.id,
        ResourceId: resource.id
      }
    });

    if (userResource) {
      await userResource.update({ quantity: userResource.quantity + quantity });
    } else {
      await UserResource.create({
        UserId: user.id,
        ResourceId: resource.id,
        quantity
      });
    }

    res.json({ message: '–†–µ—Å—É—Ä—Å—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:', err);
    res.status(400).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é' });
  }
});

// üîπ –ê–¥–º–∏–Ω: –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã –±–∞–Ω–∫–∞
router.get('/bank-resources', authMiddleware, roleMiddleware('admin'), async (req, res) => {
  try {
    console.log("–°–∫–æ–ª—å–∫–æ —Ä–µ—Å–æ–≤ —É –±–∞–Ω–∫–∞?")
    const bankResources = await BankResource.findAll({
      include: [{
        model: Resource,
        attributes: ['name']
      }]
    });
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    const formattedResources = bankResources
      .filter(br => br.Resource)
      .map(br => ({
        name: br.Resource.name,
        totalQuantity: br.quantity
      }));
    console.log(formattedResources)
    res.json(formattedResources);
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –±–∞–Ω–∫–∞:', err);
    res.status(400).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ—Å—É—Ä—Å–æ–≤ –±–∞–Ω–∫–∞' });
  }
});

module.exports = router;